/*1. Write a program to convert Roman to integer
Eg : 
Input : IV
Output: 4
*/

import java.util.Scanner;
import java.util.TreeMap;

public class a1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the Roman Numerals :");
        String  str = sc.nextLine();
        int sum =0;
        TreeMap<Character , Integer> romanNumber = new TreeMap<Character ,Integer>();

        romanNumber.put('I', 1);
        romanNumber.put('V', 5);
        romanNumber.put('X', 10);
        romanNumber.put('L', 50);
        romanNumber.put('C', 100);
        romanNumber.put('D', 500);
        romanNumber.put('M', 1000);

        int l = str.length();
        for (int i = 0; i < l; i++) {
            if(i !=l-1 && romanNumber.get(str.charAt(i)) < romanNumber.get(str.charAt(i+1)) ){
                sum += romanNumber.get(str.charAt(i+1))-romanNumber.get(str.charAt(i));
                i++;
            }else{
                sum +=romanNumber.get(str.charAt(i))+romanNumber.get(str.charAt(i+1));
            }
        }
        System.out.println(sum);
      
    }
}

...............................................................................................................................

2. Write a program to print index of value if it is not present print -1
Input: 5 (array size)
 1 6 3 8 3 
 6 ( key value to search)
Output: 1
Input : 9
 1 2 3 4 6 7 8 5 9
 10
Output: -1


import java.util.Scanner;

public class a2 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i <n; i++) {
            arr[i]=sc.nextInt();
        }

        int element = sc.nextInt();
        int idx = 0 ;
        boolean found = false;
        for (int i = 0; i <n; i++) {
            if(arr[i] == element){
                idx +=i;
                found = found || true;
            }else{
                found = found || false;
            }
        }
        if(found == true){
            System.out.println(idx);
        }else{
            System.out.println(-1);
        }
        
    }
}



...........................................................................................

3. Write a program to find median of two arrays 
Input : 2 (size of array 1)
 1 3 (array values)
 1 (size of array2 )
 2
Output : 2
Input : 3
 1 3 5
 3
 2 4 6
 Output: 3.5

import java.util.Scanner;

public class a3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n1 = sc.nextInt();
        int[] arr1 = new int[n1];
        for (int i = 0; i < n1; i++) {
            arr1[i] = sc.nextInt();
        }
        int n2 =sc.nextInt();
        int[] arr2 = new int[n2];
        for (int i = 0; i < n2; i++) {
            arr2[i] = sc.nextInt();
        }
        double sum =0;
        int tlen = n1+n2;
        for (int i = 0; i < tlen; i++) {
            if(i<n1){
                sum = sum +arr1[i];
            }else{
                sum = sum +arr2[i-n1];
            }
        }

        System.out.println(sum/tlen );
    }
}


.........................................................................................................


4. Find the third distinct maximum number in this array. If the third maximum does not exist, 
return the maximum number.
Input : 3 (array size)
 3 1 2 
 Output : 1
Input: 2
 1 2
Output: 2
Input 4
 1 2 2 3 
Ouput : 1



import java.text.Collator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

// package Assignments;

public class a4 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        Integer[] arr = new Integer[n];
        for (int i = 0; i <n; i++) {
            arr[i]=sc.nextInt();
        }

        Arrays.sort(arr);

        List<Integer> list = Arrays.asList(arr);
        Stream<Integer> uniqueList = list.stream().distinct();
                // ArrayList<Integer> newArrayList = uniqueList.collect(Collectors.toCollection(ArrayList::new));
        Integer[] newArray = uniqueList.toArray(Integer[]::new);
        if(newArray.length>2){
            System.out.println(newArray[newArray.length-3]);

        }else{
            System.out.println(newArray[newArray.length-1]);
        }
    
    }
}

